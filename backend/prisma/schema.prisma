generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Matching your Supabase schema
model Profile {
  id               String   @id @default(uuid())
  currency         String   @default("USD")
  currency_symbol  String   @default("$")
  business_name    String?
  business_address String?
  business_phone   String?
  business_email   String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  sales     Sale[]
  products  Product[]
  customers Customer[]
  inventory Inventory[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  sku         String
  barcode     String?
  price       Float
  category    String?
  description String?
  min_stock   Int       @default(0)
  status      String    @default("active")
  user_id     String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  profile     Profile      @relation(fields: [user_id], references: [id])
  inventory   Inventory[]
  sale_items  SaleItem[]

  @@index([user_id])
  @@index([sku])
  @@index([barcode])
}

model Customer {
  id                 String    @id @default(uuid())
  name               String
  phone              String
  email              String?
  address            String?
  notes              String?
  total_purchases    Int       @default(0)
  total_spent        Float     @default(0)
  loyalty_points     Int       @default(0)
  loyalty_enabled    Boolean   @default(false)
  email_updates      Boolean   @default(false)
  sms_notifications  Boolean   @default(false)
  status             String    @default("active")
  user_id            String
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  deleted_at         DateTime?

  profile Profile @relation(fields: [user_id], references: [id])
  sales   Sale[]

  @@index([user_id])
  @@index([phone])
}

model Sale {
  id                String   @id @default(uuid())
  customer_id       String?
  subtotal          Float
  tax               Float    @default(0)
  discount          Float    @default(0)
  total             Float
  payment_method    String
  payment_status    String   @default("completed")
  change_amount     Float    @default(0)
  received_amount   Float
  notes             String?
  user_id           String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  profile   Profile    @relation(fields: [user_id], references: [id])
  customer  Customer?  @relation(fields: [customer_id], references: [id])
  items     SaleItem[]

  @@index([user_id])
  @@index([customer_id])
}

model SaleItem {
  id         String   @id @default(uuid())
  sale_id    String
  product_id String
  quantity   Int
  price      Float
  total      Float
  created_at DateTime @default(now())

  sale    Sale    @relation(fields: [sale_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@index([sale_id])
  @@index([product_id])
}

model Inventory {
  id             String   @id @default(uuid())
  product_id     String
  quantity       Int      @default(0)
  last_restock   DateTime?
  reorder_point  Int      @default(10)
  reorder_qty    Int      @default(50)
  user_id        String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [id])
  profile Profile @relation(fields: [user_id], references: [id])

  @@unique([product_id, user_id])
  @@index([product_id])
  @@index([user_id])
}